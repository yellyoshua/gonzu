version: '3.3'

services:
  traefik:
    container_name: traefik
    image: traefik:latest
    restart: always
    ports:
      - '80:80' # <== http
      - '8080:8080' # <== :8080 is where the dashboard runs on
      - '443:443' # <== https
      - '25:25' #  SMTP - mostly processing incoming mails
      - '110:110' #  POP3 - standard protocol for accessing mailbox, STARTTLS is required before client auth
      - '143:143' #  IMAP - standard protocol for accessing mailbox, STARTTLS is required before client auth
      - '587:587' #  MSA - SMTP port used primarily for email clients after STARTTLS and auth
      - '993:993' #  IMAPS - alternative port for IMAP encrypted since connection
      - '995:995' #  POP3S - encrypted POP3 since connections
      - '465:465' #  SMTPS - Legacy SMTPs port
      - '4190:4190' #  Sieve - Filters
    command:
      #### These are the CLI commands that will configure Traefik and tell it how to work! ####
      ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
      - --api=true
      - --api.insecure=false # <== Enabling insecure api, NOT RECOMMENDED FOR PRODUCTION
      - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc...
      - --api.debug=true # <== Enabling additional endpoints for debugging and profiling
      ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
      - --log.level=DEBUG # <== Setting the level of the logs from traefik
      ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
      - --providers.docker=true # <== Enabling docker as the provider for traefik
      - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik, only expose enabled ones
      - --providers.file.filename=/dynamic.yaml # <== Referring to a dynamic configuration file
      - --providers.docker.network=gonzu_web # <== Operate on the docker network named web
      ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
      - --entrypoints.web.address=:80 # <== Defining an entrypoint for port :80 named web
      - --entrypoints.web-secured.address=:443 # <== Defining an entrypoint for https on port :443 named web-secured
      - --entrypoints.smtp.address=:25 # <== Defining an entrypoint for port :25 named smtp
      - --entrypoints.pop3.address=:110 # <== Defining an entrypoint for port :110 named pop3
      - --entrypoints.imap.address=:143 # <== Defining an entrypoint for port :143 named imap
      - --entrypoints.msa.address=:587 # <== Defining an entrypoint for port :587 named msa
      - --entrypoints.imap-secured.address=:993 # <== Defining an entrypoint for port :993 named imap-secured
      - --entrypoints.pop3-secured.address=:995 # <== Defining an entrypoint for port :995 named pop3-secured
      - --entrypoints.smtp-secured.address=:465 # <== Defining an entrypoint for port :465 named smtp-secured
      - --entrypoints.sieve.address=:4190 # <== Defining an entrypoint for port :4190 named sieve
      ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
      - --certificatesresolvers.mytlschallenge.acme.tlschallenge=true # <== Enable TLS-ALPN-01 to generate and renew ACME certs
      - --certificatesresolvers.mytlschallenge.acme.email=${TLS_EMAIL} # <== Setting email for certs
      - --certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json # <== Defining acme file to store cert information
    volumes:
      - ./dynamic.yaml:/dynamic.yaml
      - /var/run/docker.sock:/var/run/docker.sock
      - /app/s3/letsencrypt:/letsencrypt
    networks:
      - web
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - 'traefik.enable=true' # <== Enable traefik on itself to view dashboard and assign subdomain to view it
      - 'traefik.http.routers.api.rule=Host(`monitor.${TLS_DOMAIN}`)' # <== Setting the domain for the dashboard
      - 'traefik.http.routers.api.entrypoints=web' # <== Defining the entrypoint for http, **ref: line 30
      - 'traefik.http.routers.api.service=api@internal' # <== Enabling the api to be a service to access
      - 'traefik.http.middlewares.redirect-https.redirectscheme.scheme=https' # <== This is a middleware scheme to https
      - 'traefik.http.middlewares.redirect-https.redirectscheme.permanent=true' # <== This is a middleware to permanent redirect
      - 'traefik.http.routers.api.middlewares=redirect-https@docker' # <== This is a middleware to redirect to https
      # - 'traefik.http.routers.api.middlewares=redirect@file' # <== This is a middleware to redirect to https
      - 'traefik.http.routers.api-secured.rule=Host(`monitor.${TLS_DOMAIN}`)' # <== Your Domain Name for the https rule
      - 'traefik.http.routers.api-secured.entrypoints=web-secured' # <== Defining entrypoint for https, **ref: line 31
      - 'traefik.http.routers.api-secured.tls.certresolver=mytlschallenge' # <== Defining certsresolvers for https
      - 'traefik.http.routers.api-secured.service=api@internal' # <== Enabling the api to be a service to access

  backups:
    container_name: backups
    image: linuxserver/duplicati:latest
    volumes:
      - /app/backups/config:/config
      - /app/backups/data:/backups
      - /app:/source
    environment:
      - PUID=1001
      - PGID=1001
      - TZ=America/Guayaquil
    networks:
      - web
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - 'traefik.enable=true' # <== Enable traefik to proxy this container
      - 'traefik.http.routers.backups.rule=Host(`backups.${TLS_DOMAIN}`)' # <== Your Domain Name goes here for the http rule
      - 'traefik.http.routers.backups.entrypoints=web' # <== Defining the entrypoint for http, **ref: line 30
      - 'traefik.http.middlewares.redirect-https.redirectscheme.scheme=https' # <== This is a middleware scheme to https
      - 'traefik.http.middlewares.redirect-https.redirectscheme.permanent=true' # <== This is a middleware to permanent redirect
      - 'traefik.http.routers.backups.middlewares=redirect-https@docker' # <== This is a middleware to redirect to https
      # - 'traefik.http.routers.backups.middlewares=redirect@file' # <== This is a middleware to redirect to https
      - 'traefik.http.routers.backups-secured.rule=Host(`backups.${TLS_DOMAIN}`)' # <== Your Domain Name for the https rule
      - 'traefik.http.routers.backups-secured.entrypoints=web-secured' # <== Defining entrypoint for https, **ref: line 31
      - 'traefik.http.routers.backups-secured.tls.certresolver=mytlschallenge' # <== Defining certsresolvers for https

  portainer:
    container_name: portainer
    image: portainer/portainer
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /app/portainer:/data
    networks:
      - web
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - 'traefik.enable=true' # <== Enable traefik to proxy this container
      - 'traefik.http.routers.portainer.rule=Host(`portainer.${TLS_DOMAIN}`)' # <== Your Domain Name goes here for the http rule
      - 'traefik.http.routers.portainer.entrypoints=web' # <== Defining the entrypoint for http, **ref: line 30
      - 'traefik.http.middlewares.redirect-https.redirectscheme.scheme=https' # <== This is a middleware scheme to https
      - 'traefik.http.middlewares.redirect-https.redirectscheme.permanent=true' # <== This is a middleware to permanent redirect
      - 'traefik.http.routers.portainer.middlewares=redirect-https@docker' # <== This is a middleware to redirect to https
      # - 'traefik.http.routers.portainer.middlewares=redirect@file' # <== This is a middleware to redirect to https
      - 'traefik.http.routers.portainer-secured.rule=Host(`portainer.${TLS_DOMAIN}`)' # <== Your Domain Name for the https rule
      - 'traefik.http.routers.portainer-secured.entrypoints=web-secured' # <== Defining entrypoint for https, **ref: line 31
      - 'traefik.http.routers.portainer-secured.tls.certresolver=mytlschallenge' # <== Defining certsresolvers for https

  mysql:
    container_name: mysql
    image: mysql:5.7
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    ports:
      - '3306:3306'
    volumes:
      - /app/mysql/data:/var/lib/mysql
    environment:
      # - MONGO_INITDB_ROOT_USERNAME=${DATABASE_USERNAME}
      - MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD}
    networks:
      - backend

  gonzu-web:
    container_name: gonzu-web
    image: yellyoshua/gonzu-web:latest
    restart: always
    environment:
      - NODE_ENV=production
    networks:
      - web
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - 'traefik.enable=true' # <== Enable traefik to proxy this container
      - 'traefik.http.routers.gonzu-web.rule=Host(`${TLS_DOMAIN}`,`www.${TLS_DOMAIN}`)' # <== Your Domain Name goes here for the http rule
      - 'traefik.http.routers.gonzu-web.entrypoints=web' # <== Defining the entrypoint for http, **ref: line 30
      - 'traefik.http.middlewares.redirect-https.redirectscheme.scheme=https' # <== This is a middleware scheme to https
      - 'traefik.http.middlewares.redirect-https.redirectscheme.permanent=true' # <== This is a middleware to permanent redirect
      - 'traefik.http.routers.gonzu-web.middlewares=redirect-https@docker' # <== This is a middleware to redirect to https
      # - 'traefik.http.routers.gonzu-web.middlewares=redirect@file' # <== This is a middleware to redirect to https
      - 'traefik.http.routers.gonzu-web-secured.rule=Host(`${TLS_DOMAIN}`,`www.${TLS_DOMAIN}`)' # <== Your Domain Name for the https rule
      - 'traefik.http.routers.gonzu-web-secured.entrypoints=web-secured' # <== Defining entrypoint for https, **ref: line 31
      - 'traefik.http.routers.gonzu-web-secured.tls.certresolver=mytlschallenge' # <== Defining certsresolvers for https

  blog:
    container_name: blog
    image: yellyoshua/ghost-on-heroku:latest
    restart: always
    volumes:
      - /app/blog/settings:/srv/ghost-on-heroku/content/settings
      - /app/blog/themes:/srv/ghost-on-heroku/content/themes
      - /app/blog/data:/srv/ghost-on-heroku/content/data
    depends_on:
      - mysql
    environment:
      SMTP_HOST: ${SMTP_HOST}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY}
      S3_ACCESS_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET}
      S3_BUCKET_REGION: ${S3_REGION}
      MYSQL_DATABASE_URL: mysql://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/gonzu_web
      PUBLIC_URL: https://${TLS_DOMAIN}
    networks:
      - web
      - backend
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - 'traefik.enable=true' # <== Enable traefik to proxy this container
      - 'traefik.docker.network=gonzu_web'
      - 'traefik.http.routers.blog.rule=Host(`${TLS_DOMAIN}`,`www.${TLS_DOMAIN}`)' # <== Your Domain Name goes here for the http rule
      - 'traefik.http.routers.blog.entrypoints=web' # <== Defining the entrypoint for http, **ref: line 30
      - 'traefik.http.middlewares.redirect-https.redirectscheme.scheme=https' # <== This is a middleware scheme to https
      - 'traefik.http.middlewares.redirect-https.redirectscheme.permanent=true' # <== This is a middleware to permanent redirect
      - 'traefik.http.routers.blog.middlewares=redirect-https@docker' # <== This is a middleware to redirect to https
      # - 'traefik.http.routers.blog.middlewares=redirect@file' # <== This is a middleware to redirect to https
      - 'traefik.http.routers.blog-secured.rule=Host(`${TLS_DOMAIN}`,`www.${TLS_DOMAIN}`)' # <== Your Domain Name for the https rule
      - 'traefik.http.routers.blog-secured.entrypoints=web-secured' # <== Defining entrypoint for https, **ref: line 31
      - 'traefik.http.routers.blog-secured.tls.certresolver=mytlschallenge' # <== Defining certsresolvers for https
      - 'traefik.http.routers.blog-secured.service=blog-secured-svc'
      - 'traefik.http.services.blog-secured-svc.loadbalancer.server.port=2368'

  mail:
    container_name: mail
    hostname: ${SMTP_HOST}
    image: analogic/poste.io
    restart: always
    environment:
      - HTTPS=OFF
      - DISABLE_CLAMAV=TRUE
      - DISABLE_RSPAMD=TRUE
      - HOSTNAME=${SMTP_HOST}
      - PUID=1000
      - PGID=1000
    volumes:
      - /app/mail:/data
    networks:
      - web
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - 'traefik.enable=true' # <== Enable traefik to proxy this container
      - 'traefik.docker.network=gonzu_web'
      - 'traefik.http.routers.mail.rule=Host(`${SMTP_HOST}`)' # <== Your Domain Name goes here for the http rule
      - 'traefik.http.routers.mail.entrypoints=web' # <== Defining the entrypoint for http, **ref: line 30
      - 'traefik.http.middlewares.redirect-https.redirectscheme.scheme=https' # <== This is a middleware scheme to https
      - 'traefik.http.middlewares.redirect-https.redirectscheme.permanent=true' # <== This is a middleware to permanent redirect
      - 'traefik.http.routers.mail.middlewares=redirect-https@docker' # <== This is a middleware to redirect to https
      # - 'traefik.http.routers.mail.middlewares=redirect@file' # <== This is a middleware to redirect to https
      - 'traefik.http.routers.mail-secured.rule=Host(`${SMTP_HOST}`)' # <== Your Domain Name for the https rule
      - 'traefik.http.routers.mail-secured.entrypoints=web-secured' # <== Defining entrypoint for https, **ref: line 31
      - 'traefik.http.routers.mail-secured.tls.certresolver=mytlschallenge' # <== Defining certsresolvers for https
      - 'traefik.http.routers.mail-secured.service=mail-secured-svc'
      - 'traefik.http.services.mail-secured-svc.loadbalancer.server.port=80'
      - 'traefik.tcp.routers.mail-smtp.rule=HostSNI(`*`)'
      - 'traefik.tcp.routers.mail-smtp.entrypoints=smtp'
      - 'traefik.tcp.routers.mail-smtp.service=mail-smtp-svc'
      - 'traefik.tcp.services.mail-smtp-svc.loadbalancer.server.port=25'
      # - 'traefik.tcp.services.mail-smtp-svc.loadbalancer.method=wrr'
      - 'traefik.tcp.routers.mail-pop3.rule=HostSNI(`*`)'
      - 'traefik.tcp.routers.mail-pop3.entrypoints=pop3'
      - 'traefik.tcp.routers.mail-pop3.service=mail-pop3-svc'
      - 'traefik.tcp.services.mail-pop3-svc.loadbalancer.server.port=110'
      # - 'traefik.tcp.services.mail-pop3-svc.loadbalancer.method=wrr'
      - 'traefik.tcp.routers.mail-imap.rule=HostSNI(`*`)'
      - 'traefik.tcp.routers.mail-imap.entrypoints=imap'
      - 'traefik.tcp.routers.mail-imap.service=mail-imap-svc'
      - 'traefik.tcp.services.mail-imap-svc.loadbalancer.server.port=143'
      # - 'traefik.tcp.services.mail-imap-svc.loadbalancer.method=wrr'
      - 'traefik.tcp.routers.mail-msa.rule=HostSNI(`*`)'
      - 'traefik.tcp.routers.mail-msa.entrypoints=msa'
      - 'traefik.tcp.routers.mail-msa.service=mail-msa-svc'
      - 'traefik.tcp.services.mail-msa-svc.loadbalancer.server.port=587'
      # - 'traefik.tcp.services.mail-msa-svc.loadbalancer.method=wrr'
      - 'traefik.tcp.routers.mail-imap-secured.rule=HostSNI(`*`)'
      - 'traefik.tcp.routers.mail-imap-secured.entrypoints=imap-secured'
      - 'traefik.tcp.routers.mail-imap-secured.service=mail-imap-secured-svc'
      - 'traefik.tcp.services.mail-imap-secured-svc.loadbalancer.server.port=993'
      # - 'traefik.tcp.services.mail-imap-secured-svc.loadbalancer.method=wrr'
      - 'traefik.tcp.routers.mail-pop3-secured.rule=HostSNI(`*`)'
      - 'traefik.tcp.routers.mail-pop3-secured.entrypoints=pop3-secured'
      - 'traefik.tcp.routers.mail-pop3-secured.service=mail-pop3-secured-svc'
      - 'traefik.tcp.services.mail-pop3-secured-svc.loadbalancer.server.port=995'
      # - 'traefik.tcp.services.mail-pop3-secured-svc.loadbalancer.method=wrr'
      - 'traefik.tcp.routers.mail-smtp-secured.rule=HostSNI(`*`)'
      - 'traefik.tcp.routers.mail-smtp-secured.entrypoints=smtp-secured'
      - 'traefik.tcp.routers.mail-smtp-secured.service=mail-smtp-secured-svc'
      - 'traefik.tcp.services.mail-smtp-secured-svc.loadbalancer.server.port=465'
      # - 'traefik.tcp.services.mail-smtp-secured-svc.loadbalancer.method=wrr'
      - 'traefik.tcp.routers.mail-sieve.rule=HostSNI(`*`)'
      - 'traefik.tcp.routers.mail-sieve.entrypoints=sieve'
      - 'traefik.tcp.routers.mail-sieve.service=mail-sieve-svc'
      - 'traefik.tcp.services.mail-sieve-svc.loadbalancer.server.port=4190'
      # - 'traefik.tcp.services.mail-sieve-svc.loadbalancer.method=wrr'

  gonzu-api:
    container_name: gonzu-api
    image: yellyoshua/gonzu-api:latest
    restart: always
    depends_on:
      - mysql
    environment:
      DATABASE_NAME: gonzu-api
      PORT: 4000
      HOST: 0.0.0.0
    env_file:
      - .env
    networks:
      - web
      - backend
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - 'traefik.enable=true' # <== Enable traefik to proxy this container
      - 'traefik.docker.network=gonzu_web'
      - 'traefik.http.routers.gonzu-api.rule=Host(`api.${TLS_DOMAIN}`)' # <== Your Domain Name goes here for the http rule
      - 'traefik.http.routers.gonzu-api.entrypoints=web' # <== Defining the entrypoint for http, **ref: line 30
      - 'traefik.http.middlewares.redirect-https.redirectscheme.scheme=https' # <== This is a middleware scheme to https
      - 'traefik.http.middlewares.redirect-https.redirectscheme.permanent=true' # <== This is a middleware to permanent redirect
      - 'traefik.http.routers.gonzu-api.middlewares=redirect-https@docker' # <== This is a middleware to redirect to https
      # - 'traefik.http.routers.gonzu-api.middlewares=redirect@file' # <== This is a middleware to redirect to https
      - 'traefik.http.routers.gonzu-api-secured.rule=Host(`api.${TLS_DOMAIN}`)' # <== Your Domain Name for the https rule
      - 'traefik.http.routers.gonzu-api-secured.entrypoints=web-secured' # <== Defining entrypoint for https, **ref: line 31
      - 'traefik.http.routers.gonzu-api-secured.tls.certresolver=mytlschallenge' # <== Defining certsresolvers for https

networks:
  web:
    driver: bridge
    driver_opts:
      parent: eth0
    ipam:
      config:
        - subnet: '192.168.0.0/24'
  backend:
    driver: bridge
    driver_opts:
      parent: eth0
    ipam:
      config:
        - subnet: '192.178.0.0/24'
