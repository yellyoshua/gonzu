version: '3.3'

services:
  traefik:
    container_name: traefik
    image: traefik:latest
    restart: always
    ports:
      - '80:80' # <== http
      - '8080:8080' # <== :8080 is where the dashboard runs on
      - '443:443' # <== https
    command:
      #### These are the CLI commands that will configure Traefik and tell it how to work! ####
      ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
      - --api.insecure=false # <== Enabling insecure api, NOT RECOMMENDED FOR PRODUCTION
      - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc...
      - --api.debug=true # <== Enabling additional endpoints for debugging and profiling
      ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
      - --log.level=DEBUG # <== Setting the level of the logs from traefik
      ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
      - --providers.docker=true # <== Enabling docker as the provider for traefik
      - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik, only expose enabled ones
      - --providers.file.filename=/dynamic.yaml # <== Referring to a dynamic configuration file
      - --providers.docker.network=web_gonzu_bridge # <== Operate on the docker network named web
      ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
      - --entrypoints.web.address=:80 # <== Defining an entrypoint for port :80 named web
      - --entrypoints.web-secured.address=:443 # <== Defining an entrypoint for https on port :443 named web-secured
      ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
      - --certificatesresolvers.mytlschallenge.acme.tlschallenge=true # <== Enable TLS-ALPN-01 to generate and renew ACME certs
      - --certificatesresolvers.mytlschallenge.acme.email=$${TLS_EMAIL} # <== Setting email for certs
      - --certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json # <== Defining acme file to store cert information
    volumes:
      - ./dynamic.yaml:/dynamic.yaml
      - /var/run/docker.sock:/var/run/docker.sock
      - /app/s3/letsencrypt:/letsencrypt
    networks:
      - web_gonzu_bridge
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - 'traefik.enable=true' # <== Enable traefik on itself to view dashboard and assign subdomain to view it
      - 'traefik.http.routers.api.rule=Host(`monitor.${TLS_DOMAIN}`)' # <== Setting the domain for the dashboard
      - 'traefik.http.routers.api.entrypoints=web' # <== Defining the entrypoint for http, **ref: line 30
      - 'traefik.http.routers.api.service=api@internal' # <== Enabling the api to be a service to access

      - 'traefik.http.routers.api.middlewares=redirect@file' # <== This is a middleware to redirect to https
      - 'traefik.http.routers.api-secured.rule=Host(`monitor.${TLS_DOMAIN}`)' # <== Your Domain Name for the https rule
      - 'traefik.http.routers.api-secured.entrypoints=web-secured' # <== Defining entrypoint for https, **ref: line 31
      - 'traefik.http.routers.api-secured.tls.certresolver=mytlschallenge' # <== Defining certsresolvers for https
      - 'traefik.http.routers.api-secured.service=api@internal' # <== Enabling the api to be a service to access

  netdata:
    container_name: netdata
    image: netdata/netdata
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - web_gonzu_bridge
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - 'traefik.enable=true' # <== Enable traefik to proxy this container
      - 'traefik.http.routers.netdata.rule=Host(`stats.${TLS_DOMAIN}`)' # <== Your Domain Name goes here for the http rule
      - 'traefik.http.routers.netdata.entrypoints=web' # <== Defining the entrypoint for http, **ref: line 30
      - 'traefik.http.routers.netdata.middlewares=redirect@file' # <== This is a middleware to redirect to https
      - 'traefik.http.routers.netdata-secured.rule=Host(`stats.${TLS_DOMAIN}`)' # <== Your Domain Name for the https rule
      - 'traefik.http.routers.netdata-secured.entrypoints=web-secured' # <== Defining entrypoint for https, **ref: line 31
      - 'traefik.http.routers.netdata-secured.tls.certresolver=mytlschallenge' # <== Defining certsresolvers for https
  #Listen in 9000 port
  portainer:
    container_name: portainer
    image: portainer/portainer
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - web_gonzu_bridge
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - 'traefik.enable=true' # <== Enable traefik to proxy this container
      - 'traefik.http.routers.portainer.rule=Host(`portainer.${TLS_DOMAIN}`)' # <== Your Domain Name goes here for the http rule
      - 'traefik.http.routers.portainer.entrypoints=web' # <== Defining the entrypoint for http, **ref: line 30
      - 'traefik.http.routers.portainer.middlewares=redirect@file' # <== This is a middleware to redirect to https
      - 'traefik.http.routers.portainer-secured.rule=Host(`portainer.${TLS_DOMAIN}`)' # <== Your Domain Name for the https rule
      - 'traefik.http.routers.portainer-secured.entrypoints=web-secured' # <== Defining entrypoint for https, **ref: line 31
      - 'traefik.http.routers.portainer-secured.tls.certresolver=mytlschallenge' # <== Defining certsresolvers for https
  #Database listen in port 27017
  mongodb:
    container_name: mongodb
    image: mongo
    restart: always
    #volumes:
    #  - /app/s3/mongodb/data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${DATABASE_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${DATABASE_PASSWORD}
    networks:
      - backend_gonzu_bridge
  #Listen in port 3000
  # web_gonzu:
  #   container_name: web_gonzu
  #   build: ./frontend-gonzu
  #   restart: always
  #   environment:
  #     - NODE_ENV=production
  #   volumes:
  #     - /app/s3/web:/app
  #     - /app/s3/web/logs:/root/.npm/_logs
  #   networks:
  #     - web_gonzu_bridge
  #Listen in port 4000
  gonzu-api:
    container_name: gonzu-api
    image: yellyoshua/gonzu-api
    restart: always
    depends_on:
      - mongodb
    env_file:
      - .env
    networks:
      - web_gonzu_bridge
      - backend_gonzu_bridge
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - 'traefik.enable=true' # <== Enable traefik to proxy this container
      - 'traefik.http.routers.gonzu-api.rule=Host(`api.${TLS_DOMAIN}`)' # <== Your Domain Name goes here for the http rule
      - 'traefik.http.routers.gonzu-api.entrypoints=web' # <== Defining the entrypoint for http, **ref: line 30
      - 'traefik.http.routers.gonzu-api.middlewares=redirect@file' # <== This is a middleware to redirect to https
      - 'traefik.http.routers.gonzu-api-secured.rule=Host(`api.${TLS_DOMAIN}`)' # <== Your Domain Name for the https rule
      - 'traefik.http.routers.gonzu-api-secured.entrypoints=web-secured' # <== Defining entrypoint for https, **ref: line 31
      - 'traefik.http.routers.gonzu-api-secured.tls.certresolver=mytlschallenge' # <== Defining certsresolvers for https
networks:
  web_gonzu_bridge:
    driver: bridge
    driver_opts:
      parent: eth0
    ipam:
      config:
        - subnet: '192.168.0.0/24'
  backend_gonzu_bridge:
    driver: bridge
    driver_opts:
      parent: eth0
    ipam:
      config:
        - subnet: '192.178.0.0/24'
